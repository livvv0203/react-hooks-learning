{"ast":null,"code":"// To store redux related file\n// import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\n// First Slice\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\n\n// Second Slice\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// // Create a counter reducer\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === 'increment') {\n//     // MUST overwrite with a new object, DO NOT change the existing state\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'decrement') {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'increase') {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'toggle') {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter\n//     }\n//   }\n\n//   return state;\n// };\n\n// Create a new store, then point at the reducer function\nconst store = configureStore({\n  reducer: {\n    // Will be merged into one main reducer to the store\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store; // only provide once, to the highest level of project - aka index.js","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggle","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["/Users/jieqingliu/Desktop/React-Test-Files/redux-test-proj-2/src/store/index.js"],"sourcesContent":["// To store redux related file\n// import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\nconst initialCounterState = { counter: 0, showCounter: true };\n\n// First Slice\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\nconst initialAuthState = {\n  isAuthenticated: false,\n};\n\n// Second Slice\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n\n// // Create a counter reducer\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === 'increment') {\n//     // MUST overwrite with a new object, DO NOT change the existing state\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'decrement') {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'increase') {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'toggle') {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter\n//     }\n//   }\n\n//   return state;\n// };\n\n// Create a new store, then point at the reducer function\nconst store = configureStore({\n  reducer: {\n    // Will be merged into one main reducer to the store\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer,\n  },\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store; // only provide once, to the highest level of project - aka index.js\n\n\n\n\n"],"mappings":"AAAA;AACA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAE7D;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDQ,SAAS,CAACD,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDS,QAAQ,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,MAAM,CAACL,KAAK,EAAE;MACZA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AACnB,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC5BM,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAE;IACRW,KAAK,CAACT,KAAK,EAAE;MACXA,KAAK,CAACO,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDG,MAAM,CAACV,KAAK,EAAE;MACZA,KAAK,CAACO,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;EAC3BqB,OAAO,EAAE;IACP;IACAnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAC7BC,IAAI,EAAEL,SAAS,CAACI;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO;AAE5C,eAAeJ,KAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module"}