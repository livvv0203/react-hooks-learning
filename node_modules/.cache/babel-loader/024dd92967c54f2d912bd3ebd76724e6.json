{"ast":null,"code":"// To store redux related file\n// import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counter';\nimport authReducer from './auth';\n\n// // Create a counter reducer\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === 'increment') {\n//     // MUST overwrite with a new object, DO NOT change the existing state\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'decrement') {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'increase') {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'toggle') {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter\n//     }\n//   }\n\n//   return state;\n// };\n\n// Create a new store, then point at the reducer function\nconst store = configureStore({\n  reducer: {\n    // Will be merged into one main reducer to the store\n    counter: counterReducer,\n    auth: authReducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store; // only provide once, to the highest level of project - aka index.js","map":{"version":3,"names":["createSlice","configureStore","counterReducer","authReducer","store","reducer","counter","auth","counterActions","counterSlice","actions","authActions","authSlice"],"sources":["/Users/jieqingliu/Desktop/React-Test-Files/redux-test-proj-2/src/store/index.js"],"sourcesContent":["// To store redux related file\n// import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counter';\nimport authReducer from './auth';\n\n// // Create a counter reducer\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === 'increment') {\n//     // MUST overwrite with a new object, DO NOT change the existing state\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'decrement') {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'increase') {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === 'toggle') {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter\n//     }\n//   }\n\n//   return state;\n// };\n\n// Create a new store, then point at the reducer function\nconst store = configureStore({\n  reducer: {\n    // Will be merged into one main reducer to the store\n    counter: counterReducer,\n    auth: authReducer,\n  },\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store; // only provide once, to the highest level of project - aka index.js\n\n\n\n\n"],"mappings":"AAAA;AACA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC9D,OAAOC,cAAc,MAAM,WAAW;AACtC,OAAOC,WAAW,MAAM,QAAQ;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAC3BI,OAAO,EAAE;IACP;IACAC,OAAO,EAAEJ,cAAc;IACvBK,IAAI,EAAEJ;EACR;AACF,CAAC,CAAC;AAEF,OAAO,MAAMK,cAAc,GAAGC,YAAY,CAACC,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGC,SAAS,CAACF,OAAO;AAE5C,eAAeN,KAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module"}